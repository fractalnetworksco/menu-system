{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n// import Column from './Components/Column.js';\n// import MenuItemWithDescription from './Components/MenuItemWithDescription.js';\n// import MenuSection from './Components/MenuSection.js';\n// import TriColumnSection from './Components/TriColumnSection.js';\n// import ImageHolder from './Components/ImageHolder.js';\n// import MenuSectionWithNote from './Components/MenuSectionWithNote.js'; // Import MenuSectionWithNote\n// import axios from 'axios';\n// import { useQuery, QueryClient, QueryClientProvider } from 'react-query';\n\n// const REFRESH_INTERVAL = 30000; // Refresh interval in milliseconds (30 seconds)\n\n// const fetchData = async (url) => {\n//   const response = await axios.get(url);\n//   return response.data;\n// };\n\n// const queryClient = new QueryClient();\n\n// function App() {\n//   const leftColumnRef = useRef(null);\n//   const rightColumnRef = useRef(null);\n\n//   const { data: gulfPondData } = useQuery('gulfPond', () => fetchData('/data/from_the_gulf_or_the_pond.json'));\n//   const { data: sectionHeaders, isLoading: sectionHeadersLoading, isError: sectionHeadersError } = useQuery('sectionHeaders', () => fetchData('/data/section_headers.json'));\n\n//   useEffect(() => {\n//     const fetchDataPeriodically = () => {\n//       fetchData('/data/from_the_gulf_or_the_pond.json');\n//       fetchData('/data/section_headers.json');\n//     };\n\n//     const intervalId = setInterval(fetchDataPeriodically, REFRESH_INTERVAL);\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   useEffect(() => {\n//     function setEqualHeight() {\n//       if (leftColumnRef.current && rightColumnRef.current) {\n//         const leftHeight = leftColumnRef.current.offsetHeight;\n//         const rightHeight = rightColumnRef.current.offsetHeight;\n//         const maxHeight = Math.max(leftHeight, rightHeight);\n//         leftColumnRef.current.style.height = `${maxHeight}px`;\n//         rightColumnRef.current.style.height = `${maxHeight}px`;\n//       }\n//     }\n\n//     // Call setEqualHeight when the window is resized\n//     window.addEventListener('resize', setEqualHeight);\n\n//     // Call setEqualHeight once initially\n//     setEqualHeight();\n\n//     // Cleanup event listener\n//     return () => window.removeEventListener('resize', setEqualHeight);\n//   }, []);\n\n//   if (sectionHeadersLoading) return <div>Loading...</div>;\n//   if (sectionHeadersError) return <div>Error fetching section headers.</div>;\n\n//   return (\n//     <div className=\"w-5/6 mx-auto flex flex-col\">\n//       <div className=\"flex flex-col md:flex-row\">\n//         <Column width=\"w-full md:w-1/2\">\n//           {/* Render MenuSectionWithNote only when sectionHeaders data is available */}\n//           {sectionHeaders && (\n//             <MenuSectionWithNote data={gulfPondData} descriptions={sectionHeaders} />\n//           )}\n//         </Column>\n//         <Column width=\"w-full md:w-1/2\">\n//           {/* Other Column content... */}\n//         </Column>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function WrappedApp() {\n//   return (\n//     <QueryClientProvider client={queryClient}>\n//       <App />\n//     </QueryClientProvider>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/home/jonathan/fractalNetworks/theLittleDooey/the-little-dooey/src/Page3.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n// import Column from './Components/Column.js';\n// import MenuItemWithDescription from './Components/MenuItemWithDescription.js';\n// import MenuSection from './Components/MenuSection.js';\n// import TriColumnSection from './Components/TriColumnSection.js';\n// import ImageHolder from './Components/ImageHolder.js';\n// import MenuSectionWithNote from './Components/MenuSectionWithNote.js'; // Import MenuSectionWithNote\n// import axios from 'axios';\n// import { useQuery, QueryClient, QueryClientProvider } from 'react-query';\n\n// const REFRESH_INTERVAL = 30000; // Refresh interval in milliseconds (30 seconds)\n\n// const fetchData = async (url) => {\n//   const response = await axios.get(url);\n//   return response.data;\n// };\n\n// const queryClient = new QueryClient();\n\n// function App() {\n//   const leftColumnRef = useRef(null);\n//   const rightColumnRef = useRef(null);\n\n//   const { data: gulfPondData } = useQuery('gulfPond', () => fetchData('/data/from_the_gulf_or_the_pond.json'));\n//   const { data: sectionHeaders, isLoading: sectionHeadersLoading, isError: sectionHeadersError } = useQuery('sectionHeaders', () => fetchData('/data/section_headers.json'));\n\n//   useEffect(() => {\n//     const fetchDataPeriodically = () => {\n//       fetchData('/data/from_the_gulf_or_the_pond.json');\n//       fetchData('/data/section_headers.json');\n//     };\n\n//     const intervalId = setInterval(fetchDataPeriodically, REFRESH_INTERVAL);\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   useEffect(() => {\n//     function setEqualHeight() {\n//       if (leftColumnRef.current && rightColumnRef.current) {\n//         const leftHeight = leftColumnRef.current.offsetHeight;\n//         const rightHeight = rightColumnRef.current.offsetHeight;\n//         const maxHeight = Math.max(leftHeight, rightHeight);\n//         leftColumnRef.current.style.height = `${maxHeight}px`;\n//         rightColumnRef.current.style.height = `${maxHeight}px`;\n//       }\n//     }\n\n//     // Call setEqualHeight when the window is resized\n//     window.addEventListener('resize', setEqualHeight);\n\n//     // Call setEqualHeight once initially\n//     setEqualHeight();\n\n//     // Cleanup event listener\n//     return () => window.removeEventListener('resize', setEqualHeight);\n//   }, []);\n\n//   if (sectionHeadersLoading) return <div>Loading...</div>;\n//   if (sectionHeadersError) return <div>Error fetching section headers.</div>;\n\n//   return (\n//     <div className=\"w-5/6 mx-auto flex flex-col\">\n//       <div className=\"flex flex-col md:flex-row\">\n//         <Column width=\"w-full md:w-1/2\">\n//           {/* Render MenuSectionWithNote only when sectionHeaders data is available */}\n//           {sectionHeaders && (\n//             <MenuSectionWithNote data={gulfPondData} descriptions={sectionHeaders} />\n//           )}\n//         </Column>\n//         <Column width=\"w-full md:w-1/2\">\n//           {/* Other Column content... */}\n//         </Column>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function WrappedApp() {\n//   return (\n//     <QueryClientProvider client={queryClient}>\n//       <App />\n//     </QueryClientProvider>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}